// Generated by Haxe 4.3.1

#pragma warning disable 109, 114, 219, 429, 168, 162
using Geometrize.Rasterizer;
using Geometrize.Shape;

namespace Geometrize
{
    public class Model
    {
        public Model(Bitmap target, int backgroundColor)
        {
            width = target.width;
            height = target.height;

            this.target = target;

            Bitmap bitmap = new Bitmap
            {
                width = width,
                height = height,
                data = (new int[(width * height)])
            };

            int i = 0;
            while ((i < bitmap.data.Length))
            {
                bitmap.data[i] = backgroundColor;
                ++i;
            }

            current = bitmap;
            Bitmap bitmap1 = new Bitmap
            {
                width = width,
                height = height,
                data = (new int[(width * height)])
            };

            int i1 = 0;
            while ((i1 < bitmap1.data.Length))
            {
                bitmap1.data[i1] = backgroundColor;
                ++i1;
            }

            buffer = bitmap1;
            score = Core.DifferenceFull(target, current);
        }


        public int width;

        public int height;

        public Bitmap target;

        public Bitmap current;

        public Bitmap buffer;

        public double score;

        public virtual ShapeAddResult Step(int[] shapeTypes, int alpha, int n, int age, SymbolShapeOptions symbolOptions)
        {
            State state = Core.BestHillClimbState(shapeTypes, alpha, n, age, this.target, this.current, this.buffer, this.score, symbolOptions);

            return AddShape(state.shape, state.alpha);
        }


        public virtual ShapeAddResult AddShape(IShape shape, int alpha)
        {
            if ((shape == null))
            {
                throw new System.Exception("FAIL: shape != null");
            }

            Bitmap _this = this.current;
            Bitmap bitmap = new Bitmap
            {
                width = _this.width,
                height = _this.height,
                data = (new int[_this.data.Length])
            };
            {
                int _g = 0;
                int _g1 = _this.data.Length;
                while ((_g < _g1))
                {
                    int i = _g++;
                    bitmap.data[i] = _this.data[i];
                }

            }

            Bitmap before = bitmap;
            var lines = shape.Rasterize();
            int color = Core.ComputeColor(this.target, this.current, lines, alpha);
            Rasterizer.Rasterizer.DrawLines(this.current, color, lines);
            this.score = Core.DifferencePartial(this.target, before, this.current, this.score, lines);

            return new ShapeAddResult()
            {
                Shape = shape,
                Color = color,
                Score = score,
            };
        }
    }
}


