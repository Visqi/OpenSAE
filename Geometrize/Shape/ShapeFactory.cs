// Generated by Haxe 4.3.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace Geometrize.Shape
{
    public class ShapeFactory
    {

        public static IShape create(int type, int xBound, int yBound, SymbolShapeOptions symbolOptions)
        {
            unchecked
            {
                switch (type)
                {
                    case 0:
                        {
                            return new Rectangle(xBound, yBound);
                        }


                    case 1:
                        {
                            return new RotatedRectangle(xBound, yBound);
                        }


                    case 2:
                        {
                            return new Triangle(xBound, yBound);
                        }


                    case 3:
                        {
                            return new Ellipse(xBound, yBound);
                        }


                    case 4:
                        {
                            return new RotatedEllipse(xBound, yBound);
                        }


                    case 5:
                        {
                            return new Circle(xBound, yBound);
                        }


                    case 6:
                        {
                            return new Line(xBound, yBound);
                        }

                    case 7:
                        {
                            return new SymbolShape(xBound, yBound, symbolOptions);
                        }

                    case 8:
                        {
                            return new RotatedSymbolShape(xBound, yBound, symbolOptions);
                        }
                }

                return null;
            }
        }


        public static IShape randomShapeOf(int xBound, int yBound, SymbolShapeOptions symbolOptions)
        {
            return create(symbolOptions.ShapeTypes[HaxeMath.rand.Next(symbolOptions.ShapeTypes.Length)], xBound, yBound, symbolOptions);
        }
    }
}


