// Generated by Haxe 4.3.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace geometrize.shape {
	public class Circle : global::geometrize.shape.Ellipse {
		
		public Circle(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
		}
		
		
		public Circle(int xBound, int yBound) : base(global::haxe.lang.EmptyObject.EMPTY) {
			global::geometrize.shape.Circle.__hx_ctor_geometrize_shape_Circle(this, xBound, yBound);
		}
		
		
		protected static void __hx_ctor_geometrize_shape_Circle(global::geometrize.shape.Circle __hx_this, int xBound, int yBound) {
			unchecked {
				global::geometrize.shape.Ellipse.__hx_ctor_geometrize_shape_Ellipse(__hx_this, xBound, yBound);
				__hx_this.rx = ( global::Std.random(32) + 1 );
				__hx_this.ry = __hx_this.rx;
			}
		}
		
		
		public override void mutate() {
			unchecked {
				int r = global::Std.random(2);
				switch (r) {
					case 0:
					{
						int @value = ( this.x + (( -16 + ((int) (global::System.Math.Floor(((double) (( 33 * global::HaxeMath.rand.NextDouble() )) ))) ) )) );
						int max = ( this.xBound - 1 );
						if (( 0 > max )) {
							throw ((global::System.Exception) (global::haxe.Exception.thrown("FAIL: min <= max")) );
						}
						
						this.x = ( (( @value < 0 )) ? (0) : (( (( @value > max )) ? (max) : (@value) )) );
						int value1 = ( this.y + (( -16 + ((int) (global::System.Math.Floor(((double) (( 33 * global::HaxeMath.rand.NextDouble() )) ))) ) )) );
						int max1 = ( this.yBound - 1 );
						if (( 0 > max1 )) {
							throw ((global::System.Exception) (global::haxe.Exception.thrown("FAIL: min <= max")) );
						}
						
						this.y = ( (( value1 < 0 )) ? (0) : (( (( value1 > max1 )) ? (max1) : (value1) )) );
						break;
					}
					
					
					case 1:
					{
						int value2 = ( this.rx + (( -16 + ((int) (global::System.Math.Floor(((double) (( 33 * global::HaxeMath.rand.NextDouble() )) ))) ) )) );
						int max2 = ( this.xBound - 1 );
						if (( 1 > max2 )) {
							throw ((global::System.Exception) (global::haxe.Exception.thrown("FAIL: min <= max")) );
						}
						
						int r1 = ( (( value2 < 1 )) ? (1) : (( (( value2 > max2 )) ? (max2) : (value2) )) );
						this.rx = r1;
						this.ry = r1;
						break;
					}
					
					
				}
				
			}
		}
		
		
		public override global::geometrize.shape.Shape clone() {
			global::geometrize.shape.Circle circle = new global::geometrize.shape.Circle(((int) (this.xBound) ), ((int) (this.yBound) ));
			circle.x = this.x;
			circle.y = this.y;
			circle.rx = this.rx;
			circle.ry = this.ry;
			return circle;
		}
		
		
		public override int getType() {
			unchecked {
				return ((int) (5) );
			}
		}
		
		
		public override global::HaxeArray<double> getRawShapeData() {
			return new global::HaxeArray<double>(new double[]{((double) (this.x) ), ((double) (this.y) ), ((double) (this.rx) )});
		}
		
		
		public override string getSvgShapeData() {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("<circle cx=\"", global::haxe.lang.Runtime.toString(this.x)), "\" cy=\""), global::haxe.lang.Runtime.toString(this.y)), "\" r=\""), global::haxe.lang.Runtime.toString(this.rx)), "\" "), global::geometrize.exporter.SvgExporter.SVG_STYLE_HOOK), " />");
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1870080157:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getSvgShapeData", 1870080157)) );
					}
					
					
					case 538995865:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getRawShapeData", 538995865)) );
					}
					
					
					case 529244784:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getType", 529244784)) );
					}
					
					
					case 1214452573:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "clone", 1214452573)) );
					}
					
					
					case 1069478790:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mutate", 1069478790)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
	}
}


