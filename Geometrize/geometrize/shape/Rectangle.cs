// Generated by Haxe 4.3.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace geometrize.shape {
	public class Rectangle : global::haxe.lang.HxObject, global::geometrize.shape.Shape {
		
		public Rectangle(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Rectangle(int xBound, int yBound) {
			global::geometrize.shape.Rectangle.__hx_ctor_geometrize_shape_Rectangle(this, xBound, yBound);
		}
		
		
		protected static void __hx_ctor_geometrize_shape_Rectangle(global::geometrize.shape.Rectangle __hx_this, int xBound, int yBound) {
			unchecked {
				__hx_this.x1 = global::Std.random(xBound);
				__hx_this.y1 = global::Std.random(yBound);
				int @value = ( ( __hx_this.x1 + global::Std.random(32) ) + 1 );
				int max = ( xBound - 1 );
				if (( 0 > max )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown("FAIL: min <= max")) );
				}
				
				__hx_this.x2 = ( (( @value < 0 )) ? (0) : (( (( @value > max )) ? (max) : (@value) )) );
				int value1 = ( ( __hx_this.y1 + global::Std.random(32) ) + 1 );
				int max1 = ( yBound - 1 );
				if (( 0 > max1 )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown("FAIL: min <= max")) );
				}
				
				__hx_this.y2 = ( (( value1 < 0 )) ? (0) : (( (( value1 > max1 )) ? (max1) : (value1) )) );
				__hx_this.xBound = xBound;
				__hx_this.yBound = yBound;
			}
		}
		
		
		public int x1;
		
		public int y1;
		
		public int x2;
		
		public int y2;
		
		public int xBound;
		
		public int yBound;
		
		public virtual global::HaxeArray<object> rasterize() {
			global::HaxeArray<object> lines = new global::HaxeArray<object>(new object[]{});
			{
				int _g = this.y1;
				int _g1 = this.y2;
				while (( _g < _g1 )) {
					int y = _g++;
					if (( this.x1 != this.x2 )) {
						int first = this.x1;
						int second = this.x2;
						int first1 = this.x1;
						int second1 = this.x2;
						lines.push(new global::geometrize.rasterizer.Scanline(((int) (y) ), ((int) (( (( first < second )) ? (first) : (second) )) ), ((int) (( (( first1 > second1 )) ? (first1) : (second1) )) )));
					}
					
				}
				
			}
			
			return lines;
		}
		
		
		public virtual void mutate() {
			unchecked {
				int r = global::Std.random(2);
				switch (r) {
					case 0:
					{
						int @value = ( this.x1 + (( -16 + ((int) (global::System.Math.Floor(((double) (( 33 * global::HaxeMath.rand.NextDouble() )) ))) ) )) );
						int max = ( this.xBound - 1 );
						if (( 0 > max )) {
							throw ((global::System.Exception) (global::haxe.Exception.thrown("FAIL: min <= max")) );
						}
						
						this.x1 = ( (( @value < 0 )) ? (0) : (( (( @value > max )) ? (max) : (@value) )) );
						int value1 = ( this.y1 + (( -16 + ((int) (global::System.Math.Floor(((double) (( 33 * global::HaxeMath.rand.NextDouble() )) ))) ) )) );
						int max1 = ( this.yBound - 1 );
						if (( 0 > max1 )) {
							throw ((global::System.Exception) (global::haxe.Exception.thrown("FAIL: min <= max")) );
						}
						
						this.y1 = ( (( value1 < 0 )) ? (0) : (( (( value1 > max1 )) ? (max1) : (value1) )) );
						break;
					}
					
					
					case 1:
					{
						int value2 = ( this.x2 + (( -16 + ((int) (global::System.Math.Floor(((double) (( 33 * global::HaxeMath.rand.NextDouble() )) ))) ) )) );
						int max2 = ( this.xBound - 1 );
						if (( 0 > max2 )) {
							throw ((global::System.Exception) (global::haxe.Exception.thrown("FAIL: min <= max")) );
						}
						
						this.x2 = ( (( value2 < 0 )) ? (0) : (( (( value2 > max2 )) ? (max2) : (value2) )) );
						int value3 = ( this.y2 + (( -16 + ((int) (global::System.Math.Floor(((double) (( 33 * global::HaxeMath.rand.NextDouble() )) ))) ) )) );
						int max3 = ( this.yBound - 1 );
						if (( 0 > max3 )) {
							throw ((global::System.Exception) (global::haxe.Exception.thrown("FAIL: min <= max")) );
						}
						
						this.y2 = ( (( value3 < 0 )) ? (0) : (( (( value3 > max3 )) ? (max3) : (value3) )) );
						break;
					}
					
					
				}
				
			}
		}
		
		
		public virtual global::geometrize.shape.Shape clone() {
			global::geometrize.shape.Rectangle rectangle = new global::geometrize.shape.Rectangle(((int) (this.xBound) ), ((int) (this.yBound) ));
			rectangle.x1 = this.x1;
			rectangle.y1 = this.y1;
			rectangle.x2 = this.x2;
			rectangle.y2 = this.y2;
			return rectangle;
		}
		
		
		public virtual int getType() {
			return ((int) (0) );
		}
		
		
		public virtual global::HaxeArray<double> getRawShapeData() {
			int first = this.x1;
			int second = this.x2;
			int first1 = this.y1;
			int second1 = this.y2;
			int first2 = this.x1;
			int second2 = this.x2;
			int first3 = this.y1;
			int second3 = this.y2;
			return new global::HaxeArray<double>(new double[]{((double) (( (( first < second )) ? (first) : (second) )) ), ((double) (( (( first1 < second1 )) ? (first1) : (second1) )) ), ((double) (( (( first2 > second2 )) ? (first2) : (second2) )) ), ((double) (( (( first3 > second3 )) ? (first3) : (second3) )) )});
		}
		
		
		public virtual string getSvgShapeData() {
			int first = this.x1;
			int second = this.x2;
			int first1 = this.y1;
			int second1 = this.y2;
			int first2 = this.x1;
			int second2 = this.x2;
			int first3 = this.x1;
			int second3 = this.x2;
			int first4 = this.y1;
			int second4 = this.y2;
			int first5 = this.y1;
			int second5 = this.y2;
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("<rect x=\"", global::haxe.lang.Runtime.toString((( (( first < second )) ? (first) : (second) )))), "\" y=\""), global::haxe.lang.Runtime.toString((( (( first1 < second1 )) ? (first1) : (second1) )))), "\" width=\""), global::haxe.lang.Runtime.toString((( (( (( first2 > second2 )) ? (first2) : (second2) )) - (( (( first3 < second3 )) ? (first3) : (second3) )) )))), "\" height=\""), global::haxe.lang.Runtime.toString((( (( (( first4 > second4 )) ? (first4) : (second4) )) - (( (( first5 < second5 )) ? (first5) : (second5) )) )))), "\" "), global::geometrize.exporter.SvgExporter.SVG_STYLE_HOOK), " />");
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 727238917:
					{
						this.yBound = ((int) (@value) );
						return @value;
					}
					
					
					case 1157459110:
					{
						this.xBound = ((int) (@value) );
						return @value;
					}
					
					
					case 27033:
					{
						this.y2 = ((int) (@value) );
						return @value;
					}
					
					
					case 26810:
					{
						this.x2 = ((int) (@value) );
						return @value;
					}
					
					
					case 27032:
					{
						this.y1 = ((int) (@value) );
						return @value;
					}
					
					
					case 26809:
					{
						this.x1 = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 727238917:
					{
						this.yBound = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1157459110:
					{
						this.xBound = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 27033:
					{
						this.y2 = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 26810:
					{
						this.x2 = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 27032:
					{
						this.y1 = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 26809:
					{
						this.x1 = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1870080157:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getSvgShapeData", 1870080157)) );
					}
					
					
					case 538995865:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getRawShapeData", 538995865)) );
					}
					
					
					case 529244784:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getType", 529244784)) );
					}
					
					
					case 1214452573:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "clone", 1214452573)) );
					}
					
					
					case 1069478790:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mutate", 1069478790)) );
					}
					
					
					case 508245239:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "rasterize", 508245239)) );
					}
					
					
					case 727238917:
					{
						return this.yBound;
					}
					
					
					case 1157459110:
					{
						return this.xBound;
					}
					
					
					case 27033:
					{
						return this.y2;
					}
					
					
					case 26810:
					{
						return this.x2;
					}
					
					
					case 27032:
					{
						return this.y1;
					}
					
					
					case 26809:
					{
						return this.x1;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 727238917:
					{
						return ((double) (this.yBound) );
					}
					
					
					case 1157459110:
					{
						return ((double) (this.xBound) );
					}
					
					
					case 27033:
					{
						return ((double) (this.y2) );
					}
					
					
					case 26810:
					{
						return ((double) (this.x2) );
					}
					
					
					case 27032:
					{
						return ((double) (this.y1) );
					}
					
					
					case 26809:
					{
						return ((double) (this.x1) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1870080157:
					{
						return this.getSvgShapeData();
					}
					
					
					case 538995865:
					{
						return this.getRawShapeData();
					}
					
					
					case 529244784:
					{
						return this.getType();
					}
					
					
					case 1214452573:
					{
						return this.clone();
					}
					
					
					case 1069478790:
					{
						this.mutate();
						break;
					}
					
					
					case 508245239:
					{
						return this.rasterize();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::HaxeArray<string> baseArr) {
			baseArr.push("yBound");
			baseArr.push("xBound");
			baseArr.push("y2");
			baseArr.push("x2");
			baseArr.push("y1");
			baseArr.push("x1");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


