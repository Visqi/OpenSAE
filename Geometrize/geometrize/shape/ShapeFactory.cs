// Generated by Haxe 4.3.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace geometrize.shape {
	public class ShapeFactory : global::haxe.lang.HxObject {
		
		public ShapeFactory(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ShapeFactory() {
			global::geometrize.shape.ShapeFactory.__hx_ctor_geometrize_shape_ShapeFactory(this);
		}
		
		
		protected static void __hx_ctor_geometrize_shape_ShapeFactory(global::geometrize.shape.ShapeFactory __hx_this) {
		}
		
		
		public static global::geometrize.shape.Shape create(int type, int xBound, int yBound) {
			unchecked {
				switch (type) {
					case 0:
					{
						return new global::geometrize.shape.Rectangle(((int) (xBound) ), ((int) (yBound) ));
					}
					
					
					case 1:
					{
						return new global::geometrize.shape.RotatedRectangle(((int) (xBound) ), ((int) (yBound) ));
					}
					
					
					case 2:
					{
						return new global::geometrize.shape.Triangle(((int) (xBound) ), ((int) (yBound) ));
					}
					
					
					case 3:
					{
						return new global::geometrize.shape.Ellipse(((int) (xBound) ), ((int) (yBound) ));
					}
					
					
					case 4:
					{
						return new global::geometrize.shape.RotatedEllipse(((int) (xBound) ), ((int) (yBound) ));
					}
					
					
					case 5:
					{
						return new global::geometrize.shape.Circle(((int) (xBound) ), ((int) (yBound) ));
					}
					
					
					case 6:
					{
						return new global::geometrize.shape.Line(((int) (xBound) ), ((int) (yBound) ));
					}
					
					
				}
				
				return null;
			}
		}
		
		
		public static global::geometrize.shape.Shape randomShape(int xBound, int yBound) {
			unchecked {
				global::HaxeArray<int> a = new global::HaxeArray<int>(new int[]{((int) (0) ), ((int) (1) ), ((int) (2) ), ((int) (3) ), ((int) (4) ), ((int) (5) ), ((int) (6) )});
				if ( ! ((( ( a != null ) && ( a.length > 0 ) ))) ) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown("FAIL: a != null && a.length > 0")) );
				}
				
				int upper = ( a.length - 1 );
				if (( 0 > upper )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown("FAIL: lower <= upper")) );
				}
				
				return global::geometrize.shape.ShapeFactory.create(a[((int) (global::System.Math.Floor(((double) (( (( upper + 1 )) * global::HaxeMath.rand.NextDouble() )) ))) )], xBound, yBound);
			}
		}
		
		
		public static global::geometrize.shape.Shape randomShapeOf(global::HaxeArray<int> types, int xBound, int yBound) {
			unchecked {
				if ( ! ((( ( types != null ) && ( types.length > 0 ) ))) ) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown("FAIL: a != null && a.length > 0")) );
				}
				
				int upper = ( types.length - 1 );
				if (( 0 > upper )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown("FAIL: lower <= upper")) );
				}
				
				return global::geometrize.shape.ShapeFactory.create(types[((int) (global::System.Math.Floor(((double) (( (( upper + 1 )) * global::HaxeMath.rand.NextDouble() )) ))) )], xBound, yBound);
			}
		}
		
		
	}
}


