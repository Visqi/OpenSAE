// Generated by Haxe 4.3.1

#pragma warning disable 109, 114, 219, 429, 168, 162
using System;

namespace geometrize.shape {
	public class RotatedEllipse : global::haxe.lang.HxObject, global::geometrize.shape.Shape {
		
		public RotatedEllipse(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public RotatedEllipse(int xBound, int yBound) {
			global::geometrize.shape.RotatedEllipse.__hx_ctor_geometrize_shape_RotatedEllipse(this, xBound, yBound);
		}
		
		
		protected static void __hx_ctor_geometrize_shape_RotatedEllipse(global::geometrize.shape.RotatedEllipse __hx_this, int xBound, int yBound) {
			unchecked {
				__hx_this.x = global::Std.random(xBound);
				__hx_this.y = global::Std.random(yBound);
				__hx_this.rx = ( global::Std.random(32) + 1 );
				__hx_this.ry = ( global::Std.random(32) + 1 );
				__hx_this.angle = global::Std.random(360);
				__hx_this.xBound = xBound;
				__hx_this.yBound = yBound;
			}
		}
		
		
		public int x;
		
		public int y;
		
		public int rx;
		
		public int ry;
		
		public int angle;
		
		public int xBound;
		
		public int yBound;
		
		public virtual global::HaxeArray<object> rasterize() {
			unchecked {
				int pointCount = 20;
				global::HaxeArray<object> points = new global::HaxeArray<object>(new object[]{});
				double rads = ( this.angle * (( global::HaxeMath.PI / 180.0 )) );
				double c = global::System.Math.Cos(((double) (rads) ));
				double s = global::System.Math.Sin(((double) (rads) ));
				{
					int _g = 0;
					int _g1 = pointCount;
					while (( _g < _g1 )) {
						int i = _g++;
						double rot = ( ( ( 360.0 / pointCount ) * i ) * (( global::HaxeMath.PI / 180.0 )) );
						double crx = ( this.rx * global::System.Math.Cos(((double) (rot) )) );
						double cry = ( this.ry * global::System.Math.Sin(((double) (rot) )) );
						int tx = ((int) (( ( ( crx * c ) - ( cry * s ) ) + this.x )) );
						int ty = ((int) (( ( ( crx * s ) + ( cry * c ) ) + this.y )) );
						points.push(new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{120, 121}, new double[]{((double) (tx) ), ((double) (ty) )}));
					}
					
				}
				
				return global::geometrize.rasterizer.Scanline.trim(global::geometrize.rasterizer.Rasterizer.scanlinesForPolygon(points), this.xBound, this.yBound);
			}
		}
		
		
		public virtual void mutate() {
			unchecked {
				switch (HaxeMath.rand.Next(4)) {
					case 0:
                        x = Math.Clamp(x + -16 + HaxeMath.rand.Next(33), 0, xBound - 1);
                        y = Math.Clamp(y + -16 + HaxeMath.rand.Next(33), 0, xBound - 1);
						break;

                    case 1:
						rx = Math.Clamp(rx -16 + HaxeMath.rand.Next(33), 1, xBound - 1);
                        break;
					
					case 2:
                        ry = Math.Clamp(ry - 16 + HaxeMath.rand.Next(33), 1, xBound - 1);
                        break;
					
					case 3:
					{
						int value4 = ( this.angle + (( -4 + ((int) (global::System.Math.Floor(((double) (( 9 * global::HaxeMath.rand.NextDouble() )) ))) ) )) );
						this.angle = ( (( value4 < 0 )) ? (0) : (( (( value4 > 360 )) ? (360) : (value4) )) );
						break;
					}
				}
			}
		}
		
		
		public virtual global::geometrize.shape.Shape clone() {
			global::geometrize.shape.RotatedEllipse ellipse = new global::geometrize.shape.RotatedEllipse(((int) (this.xBound) ), ((int) (this.yBound) ));
			ellipse.x = this.x;
			ellipse.y = this.y;
			ellipse.rx = this.rx;
			ellipse.ry = this.ry;
			ellipse.angle = this.angle;
			return ellipse;
		}
		
		
		public virtual int getType() {
			unchecked {
				return ((int) (4) );
			}
		}
		
		
		public virtual global::HaxeArray<double> getRawShapeData() {
			return new global::HaxeArray<double>(new double[]{((double) (this.x) ), ((double) (this.y) ), ((double) (this.rx) ), ((double) (this.ry) ), ((double) (this.angle) )});
		}
		
		
		public virtual string getSvgShapeData() {
			unchecked {
				string s = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("<g transform=\"translate(", global::haxe.lang.Runtime.toString(this.x)), " "), global::haxe.lang.Runtime.toString(this.y)), ") rotate("), global::haxe.lang.Runtime.toString(this.angle)), ") scale("), global::haxe.lang.Runtime.toString(this.rx)), " "), global::haxe.lang.Runtime.toString(this.ry)), ")\">");
				s = global::haxe.lang.Runtime.concat(s, global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("<ellipse cx=\"", global::haxe.lang.Runtime.toString(0)), "\" cy=\""), global::haxe.lang.Runtime.toString(0)), "\" rx=\""), global::haxe.lang.Runtime.toString(1)), "\" ry=\""), global::haxe.lang.Runtime.toString(1)), "\" "), global::geometrize.exporter.SvgExporter.SVG_STYLE_HOOK), " />"));
				s = global::haxe.lang.Runtime.concat(s, "</g>");
				return s;
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 727238917:
					{
						this.yBound = ((int) (@value) );
						return @value;
					}
					
					
					case 1157459110:
					{
						this.xBound = ((int) (@value) );
						return @value;
					}
					
					
					case 585253843:
					{
						this.angle = ((int) (@value) );
						return @value;
					}
					
					
					case 25543:
					{
						this.ry = ((int) (@value) );
						return @value;
					}
					
					
					case 25542:
					{
						this.rx = ((int) (@value) );
						return @value;
					}
					
					
					case 121:
					{
						this.y = ((int) (@value) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 727238917:
					{
						this.yBound = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1157459110:
					{
						this.xBound = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 585253843:
					{
						this.angle = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 25543:
					{
						this.ry = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 25542:
					{
						this.rx = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 121:
					{
						this.y = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1870080157:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getSvgShapeData", 1870080157)) );
					}
					
					
					case 538995865:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getRawShapeData", 538995865)) );
					}
					
					
					case 529244784:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getType", 529244784)) );
					}
					
					
					case 1214452573:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "clone", 1214452573)) );
					}
					
					
					case 1069478790:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "mutate", 1069478790)) );
					}
					
					
					case 508245239:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "rasterize", 508245239)) );
					}
					
					
					case 727238917:
					{
						return this.yBound;
					}
					
					
					case 1157459110:
					{
						return this.xBound;
					}
					
					
					case 585253843:
					{
						return this.angle;
					}
					
					
					case 25543:
					{
						return this.ry;
					}
					
					
					case 25542:
					{
						return this.rx;
					}
					
					
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 727238917:
					{
						return ((double) (this.yBound) );
					}
					
					
					case 1157459110:
					{
						return ((double) (this.xBound) );
					}
					
					
					case 585253843:
					{
						return ((double) (this.angle) );
					}
					
					
					case 25543:
					{
						return ((double) (this.ry) );
					}
					
					
					case 25542:
					{
						return ((double) (this.rx) );
					}
					
					
					case 121:
					{
						return ((double) (this.y) );
					}
					
					
					case 120:
					{
						return ((double) (this.x) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1870080157:
					{
						return this.getSvgShapeData();
					}
					
					
					case 538995865:
					{
						return this.getRawShapeData();
					}
					
					
					case 529244784:
					{
						return this.getType();
					}
					
					
					case 1214452573:
					{
						return this.clone();
					}
					
					
					case 1069478790:
					{
						this.mutate();
						break;
					}
					
					
					case 508245239:
					{
						return this.rasterize();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::HaxeArray<string> baseArr) {
			baseArr.push("yBound");
			baseArr.push("xBound");
			baseArr.push("angle");
			baseArr.push("ry");
			baseArr.push("rx");
			baseArr.push("y");
			baseArr.push("x");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


