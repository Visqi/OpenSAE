// Generated by Haxe 4.3.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace geometrize {
	public class Util : global::haxe.lang.HxObject {
		
		public Util(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Util() {
			global::geometrize.Util.__hx_ctor_geometrize_Util(this);
		}
		
		
		protected static void __hx_ctor_geometrize_Util(global::geometrize.Util __hx_this) {
		}
		
		
		public static int getAverageImageColor(global::geometrize.bitmap.Bitmap image) {
			unchecked {
				if (( image == null )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown("FAIL: image != null")) );
				}
				
				int totalRed = 0;
				int totalGreen = 0;
				int totalBlue = 0;
				{
					int _g = 0;
					int _g1 = image.width;
					while (( _g < _g1 )) {
						int x = _g++;
						{
							int _g2 = 0;
							int _g3 = image.height;
							while (( _g2 < _g3 )) {
								int y = _g2++;
								int pixel = ((int[]) (image.data) )[( ( image.width * y ) + x )];
								totalRed += ( ( ((int) (pixel) ) >> 24 ) & 255 );
								totalGreen += ( ( ((int) (pixel) ) >> 16 ) & 255 );
								totalBlue += ( ( ((int) (pixel) ) >> 8 ) & 255 );
							}
							
						}
						
					}
					
				}
				
				int size = ( image.width * image.height );
				int red = ( totalRed / size );
				int green = ( totalGreen / size );
				int blue = ( totalBlue / size );
				return ( ( ( (( (( (( red < 0 )) ? (0) : (( (( red > 255 )) ? (255) : (red) )) )) << 24 )) + (( (( (( green < 0 )) ? (0) : (( (( green > 255 )) ? (255) : (green) )) )) << 16 )) ) + (( (( (( blue < 0 )) ? (0) : (( (( blue > 255 )) ? (255) : (blue) )) )) << 8 )) ) + 255 );
			}
		}
	}
}


