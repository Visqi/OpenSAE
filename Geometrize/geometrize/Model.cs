// Generated by Haxe 4.3.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace geometrize {
	public class Model : haxe.lang.HxObject {
		
		public Model(haxe.lang.EmptyObject empty) {
		}
		
		
		public Model(bitmap.Bitmap target, int backgroundColor) {
            __hx_ctor_geometrize_Model(this, target, backgroundColor);
		}
		
		
		protected static void __hx_ctor_geometrize_Model(Model __hx_this, bitmap.Bitmap target, int backgroundColor) {
			if (( target == null )) {
				throw ((System.Exception) (haxe.Exception.thrown("FAIL: target != null")) );
			}
			
			__hx_this.width = target.width;
			__hx_this.height = target.height;
			__hx_this.target = target;
			int w = target.width;
			int h = target.height;
            bitmap.Bitmap bitmap = new bitmap.Bitmap();
			bitmap.width = w;
			bitmap.height = h;
			bitmap.data = (new int[(w * h)]);
			int i = 0;
			while (( i < bitmap.data.Length )) {
                bitmap.data[i] = backgroundColor;
				 ++ i;
			}
			
			__hx_this.current = bitmap;
			int w1 = target.width;
			int h1 = target.height;
            bitmap.Bitmap bitmap1 = new bitmap.Bitmap();
			bitmap1.width = w1;
			bitmap1.height = h1;
			bitmap1.data = (new int[(w1 * h1)]);
			int i1 = 0;
			while (( i1 < bitmap1.data.Length )) {
                bitmap1.data[i1] = backgroundColor;
				 ++ i1;
			}
			
			__hx_this.buffer = bitmap1;
			__hx_this.score = Core.differenceFull(target, __hx_this.current);
		}
		
		
		public int width;
		
		public int height;
		
		public bitmap.Bitmap target;
		
		public bitmap.Bitmap current;
		
		public bitmap.Bitmap buffer;
		
		public double score;
		
		public virtual HaxeArray<object> step(HaxeArray<int> shapeTypes, int alpha, int n, int age, SymbolShapeOptions symbolOptions) {
            State state = Core.bestHillClimbState(shapeTypes, alpha, n, age, this.target, this.current, this.buffer, this.score, symbolOptions);
            HaxeArray<object> results = new HaxeArray<object>(new object[]{this.addShape(state.shape, state.alpha)});
			return results;
		}
		
		
		public virtual object addShape(shape.Shape shape, int alpha) {
			if (( shape == null )) {
				throw ((System.Exception) (haxe.Exception.thrown("FAIL: shape != null")) );
			}

            bitmap.Bitmap _this = this.current;
            bitmap.Bitmap bitmap = new bitmap.Bitmap();
			bitmap.width = _this.width;
			bitmap.height = _this.height;
			bitmap.data = (new int[_this.data.Length]);
			{
				int _g = 0;
				int _g1 = _this.data.Length;
				while (( _g < _g1 )) {
					int i = _g++;
                    bitmap.data[i] = _this.data[i];
				}
				
			}

            bitmap.Bitmap before = bitmap;
            var lines = shape.rasterize();
			int color = Core.computeColor(this.target, this.current, lines, alpha);
            rasterizer.Rasterizer.drawLines(this.current, color, lines);
			this.score = Core.differencePartial(this.target, before, this.current, this.score, lines);
			object result = new haxe.lang.DynamicObject(new int[]{2082267937}, new object[]{shape}, new int[]{1247572323, 2027516754}, new double[]{ color, this.score});
			return result;
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2027516754:
					{
						this.score = @value;
						return @value;
					}
					
					
					case 38537191:
					{
						this.height = ((int) (@value) );
						return @value;
					}
					
					
					case 1247983110:
					{
						this.width = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2027516754:
					{
						this.score = haxe.lang.Runtime.toDouble(@value);
						return @value;
					}
					
					
					case 1351924992:
					{
						this.buffer = ((bitmap.Bitmap) (@value) );
						return @value;
					}
					
					
					case 1273207865:
					{
						this.current = ((bitmap.Bitmap) (@value) );
						return @value;
					}
					
					
					case 116192081:
					{
						this.target = ((bitmap.Bitmap) (@value) );
						return @value;
					}
					
					
					case 38537191:
					{
						this.height = haxe.lang.Runtime.toInt(@value);
						return @value;
					}
					
					
					case 1247983110:
					{
						this.width = haxe.lang.Runtime.toInt(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1970932032:
					{
						return new haxe.lang.Closure(this, "addShape", 1970932032);
					}
					
					
					case 1281091404:
					{
						return new haxe.lang.Closure(this, "step", 1281091404);
					}
					
					
					case 2027516754:
					{
						return this.score;
					}
					
					
					case 1351924992:
					{
						return this.buffer;
					}
					
					
					case 1273207865:
					{
						return this.current;
					}
					
					
					case 116192081:
					{
						return this.target;
					}
					
					
					case 38537191:
					{
						return this.height;
					}
					
					
					case 1247983110:
					{
						return this.width;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2027516754:
					{
						return this.score;
					}
					
					
					case 38537191:
					{
						return this.height;
					}
					
					
					case 1247983110:
					{
						return this.width;
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1970932032:
					{
						return this.addShape(((shape.Shape) (dynargs[0]) ), haxe.lang.Runtime.toInt(dynargs[1]));
					}
					
					
					case 1281091404:
					{
						return this.step(((HaxeArray<int>) (HaxeArray<object>.__hx_cast<int>(((HaxeArray) (dynargs[0]) ))) ), haxe.lang.Runtime.toInt(dynargs[1]), haxe.lang.Runtime.toInt(dynargs[2]), haxe.lang.Runtime.toInt(dynargs[3]), new SymbolShapeOptions());
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(HaxeArray<string> baseArr) {
			baseArr.push("score");
			baseArr.push("buffer");
			baseArr.push("current");
			baseArr.push("target");
			baseArr.push("height");
			baseArr.push("width");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


