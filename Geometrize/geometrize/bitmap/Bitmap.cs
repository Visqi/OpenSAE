// Generated by Haxe 4.3.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace geometrize.bitmap {
	public class Bitmap : global::haxe.lang.HxObject {
		
		public Bitmap(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Bitmap() {
			global::geometrize.bitmap.Bitmap.__hx_ctor_geometrize_bitmap_Bitmap(this);
		}
		
		
		protected static void __hx_ctor_geometrize_bitmap_Bitmap(global::geometrize.bitmap.Bitmap __hx_this) {
		}
		
		
		public static global::geometrize.bitmap.Bitmap create(int w, int h, int color) {
			global::geometrize.bitmap.Bitmap bitmap = new global::geometrize.bitmap.Bitmap();
			bitmap.width = w;
			bitmap.height = h;
			bitmap.data = ((int[]) (new int[( w * h )]) );
			int i = 0;
			while (( i < ( ((int[]) (bitmap.data) ) as global::System.Array ).Length )) {
				((int[]) (bitmap.data) )[i] = color;
				 ++ i;
			}
			
			return bitmap;
		}
		
		
		public static global::geometrize.bitmap.Bitmap createFromBytes(int w, int h, global::haxe.io.Bytes bytes) {
			unchecked {
				global::geometrize.bitmap.Bitmap bitmap = new global::geometrize.bitmap.Bitmap();
				if (( bytes == null )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown("FAIL: bytes != null")) );
				}
				
				{
					int actual = bytes.length;
					int expected = ( ( w * h ) * 4 );
					if (( actual != expected )) {
						throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("FAIL: values are not equal (expected: ", global::haxe.lang.Runtime.toString(expected)), ", actual: "), global::haxe.lang.Runtime.toString(actual)), ")"))) );
					}
					
				}
				
				bitmap.width = w;
				bitmap.height = h;
				bitmap.data = ((int[]) (new int[( bytes.length / 4 )]) );
				int i = 0;
				int x = 0;
				while (( i < bytes.length )) {
					{
						int red = ((int) (bytes.b[i]) );
						int green = ((int) (bytes.b[( i + 1 )]) );
						int blue = ((int) (bytes.b[( i + 2 )]) );
						int alpha = ((int) (bytes.b[( i + 3 )]) );
						((int[]) (bitmap.data) )[x] = ((int) (( ( ( (( (( (( red < 0 )) ? (0) : (( (( red > 255 )) ? (255) : (red) )) )) << 24 )) + (( (( (( green < 0 )) ? (0) : (( (( green > 255 )) ? (255) : (green) )) )) << 16 )) ) + (( (( (( blue < 0 )) ? (0) : (( (( blue > 255 )) ? (255) : (blue) )) )) << 8 )) ) + (( (( alpha < 0 )) ? (0) : (( (( alpha > 255 )) ? (255) : (alpha) )) )) )) );
					}
					
					i += 4;
					 ++ x;
				}
				
				return bitmap;
			}
		}
		
		
		public static global::geometrize.bitmap.Bitmap createFromByteArray(int w, int h, global::HaxeArray<int> bytes) {
			unchecked {
				global::haxe.io.Bytes data = global::haxe.io.Bytes.alloc(bytes.length);
				int i = 0;
				while (( i < bytes.length )) {
					data.b[i] = ((byte) (bytes[i]) );
					 ++ i;
				}
				
				global::geometrize.bitmap.Bitmap bitmap = new global::geometrize.bitmap.Bitmap();
				if (( data == null )) {
					throw ((global::System.Exception) (global::haxe.Exception.thrown("FAIL: bytes != null")) );
				}
				
				{
					int actual = data.length;
					int expected = ( ( w * h ) * 4 );
					if (( actual != expected )) {
						throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("FAIL: values are not equal (expected: ", global::haxe.lang.Runtime.toString(expected)), ", actual: "), global::haxe.lang.Runtime.toString(actual)), ")"))) );
					}
					
				}
				
				bitmap.width = w;
				bitmap.height = h;
				bitmap.data = ((int[]) (new int[( data.length / 4 )]) );
				int i1 = 0;
				int x = 0;
				while (( i1 < data.length )) {
					{
						int red = ((int) (data.b[i1]) );
						int green = ((int) (data.b[( i1 + 1 )]) );
						int blue = ((int) (data.b[( i1 + 2 )]) );
						int alpha = ((int) (data.b[( i1 + 3 )]) );
						((int[]) (bitmap.data) )[x] = ((int) (( ( ( (( (( (( red < 0 )) ? (0) : (( (( red > 255 )) ? (255) : (red) )) )) << 24 )) + (( (( (( green < 0 )) ? (0) : (( (( green > 255 )) ? (255) : (green) )) )) << 16 )) ) + (( (( (( blue < 0 )) ? (0) : (( (( blue > 255 )) ? (255) : (blue) )) )) << 8 )) ) + (( (( alpha < 0 )) ? (0) : (( (( alpha > 255 )) ? (255) : (alpha) )) )) )) );
					}
					
					i1 += 4;
					 ++ x;
				}
				
				return bitmap;
			}
		}
		
		
		public int width;
		
		public int height;
		
		public int[] data;
		
		public int getPixel(int x, int y) {
			return ((int[]) (this.data) )[( ( this.width * y ) + x )];
		}
		
		
		public void setPixel(int x, int y, int color) {
			((int[]) (this.data) )[( ( this.width * y ) + x )] = color;
		}
		
		
		public global::geometrize.bitmap.Bitmap clone() {
			global::geometrize.bitmap.Bitmap bitmap = new global::geometrize.bitmap.Bitmap();
			bitmap.width = this.width;
			bitmap.height = this.height;
			bitmap.data = ((int[]) (new int[( ((int[]) (this.data) ) as global::System.Array ).Length]) );
			{
				int _g = 0;
				int _g1 = ( ((int[]) (this.data) ) as global::System.Array ).Length;
				while (( _g < _g1 )) {
					int i = _g++;
					((int[]) (bitmap.data) )[i] = ((int[]) (this.data) )[i];
				}
				
			}
			
			return bitmap;
		}
		
		
		public void fill(int color) {
			unchecked {
				int idx = 0;
				while (( idx < ( ((int[]) (this.data) ) as global::System.Array ).Length )) {
					((int[]) (this.data) )[idx] = ( ( ((int) (color) ) >> 24 ) & 255 );
					((int[]) (this.data) )[( idx + 1 )] = ( ( ((int) (color) ) >> 16 ) & 255 );
					((int[]) (this.data) )[( idx + 2 )] = ( ( ((int) (color) ) >> 8 ) & 255 );
					((int[]) (this.data) )[( idx + 3 )] = ( ((int) (color) ) & 255 );
					idx += 4;
				}
				
			}
		}
		
		
		public global::haxe.io.Bytes getBytes() {
			unchecked {
				global::haxe.io.Bytes bytes = global::haxe.io.Bytes.alloc(( ( ((int[]) (this.data) ) as global::System.Array ).Length * 4 ));
				int i = 0;
				while (( i < ( ((int[]) (this.data) ) as global::System.Array ).Length )) {
					int idx = ( i * 4 );
					bytes.b[idx] = ((byte) (( ( ((int) (((int[]) (this.data) )[i]) ) >> 24 ) & 255 )) );
					bytes.b[( idx + 1 )] = ((byte) (( ( ((int) (((int[]) (this.data) )[i]) ) >> 16 ) & 255 )) );
					bytes.b[( idx + 2 )] = ((byte) (( ( ((int) (((int[]) (this.data) )[i]) ) >> 8 ) & 255 )) );
					bytes.b[( idx + 3 )] = ((byte) (( ((int) (((int[]) (this.data) )[i]) ) & 255 )) );
					 ++ i;
				}
				
				return bytes;
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 38537191:
					{
						this.height = ((int) (@value) );
						return @value;
					}
					
					
					case 1247983110:
					{
						this.width = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1113806378:
					{
						this.data = ((int[]) (@value) );
						return @value;
					}
					
					
					case 38537191:
					{
						this.height = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1247983110:
					{
						this.width = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 493819893:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getBytes", 493819893)) );
					}
					
					
					case 1136381571:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "fill", 1136381571)) );
					}
					
					
					case 1214452573:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "clone", 1214452573)) );
					}
					
					
					case 1356345220:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setPixel", 1356345220)) );
					}
					
					
					case 578475536:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getPixel", 578475536)) );
					}
					
					
					case 1113806378:
					{
						return this.data;
					}
					
					
					case 38537191:
					{
						return this.height;
					}
					
					
					case 1247983110:
					{
						return this.width;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 38537191:
					{
						return ((double) (this.height) );
					}
					
					
					case 1247983110:
					{
						return ((double) (this.width) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 493819893:
					{
						return this.getBytes();
					}
					
					
					case 1136381571:
					{
						this.fill(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1214452573:
					{
						return this.clone();
					}
					
					
					case 1356345220:
					{
						this.setPixel(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[2])) ));
						break;
					}
					
					
					case 578475536:
					{
						return this.getPixel(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::HaxeArray<string> baseArr) {
			baseArr.push("data");
			baseArr.push("height");
			baseArr.push("width");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


