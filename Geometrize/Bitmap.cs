// Generated by Haxe 4.3.1

#pragma warning disable 109, 114, 219, 429, 168, 162
using System;
using System.Collections.Generic;
using System.Data.Common;

namespace Geometrize
{
    public class Bitmap
    {
        public static Bitmap CreateFromByteArray(int w, int h, IReadOnlyList<byte> bytes)
        {
            Bitmap bitmap = new Bitmap();

            if (bytes.Count != w * h * 4)
                throw new ArgumentException("Number of bytes must be equal to width * height * 4", nameof(bytes));

            bitmap.width = w;
            bitmap.height = h;
            bitmap.data = new int[bytes.Count / 4];

            int x = 0;
            for (int i = 0; i < bytes.Count; i += 4)
            {
                var red = bytes[i];
                var green = bytes[i + 1];
                var blue = bytes[i + 2];
                var alpha = bytes[i + 3];

                bitmap.data[x++] = (red << 24) + (green << 16) + (blue << 8) + alpha;
            }

            return bitmap;
        }


        public int width;

        public int height;

        public int[] data;

        public int GetPixel(int x, int y)
        {
            return data[width * y + x];
        }


        public void SetPixel(int x, int y, int color)
        {
            data[width * y + x] = color;
        }


        public Bitmap Clone()
        {
            Bitmap bitmap = new Bitmap
            {
                width = width,
                height = height,
                data = new int[data.Length]
            };

            Array.Copy(data, bitmap.data, data.Length);

            return bitmap;
        }


        public void Fill(int color)
        {
            unchecked
            {
                int idx = 0;
                while (idx < data.Length)
                {
                    data[idx] = color >> 24 & 255;
                    data[idx + 1] = color >> 16 & 255;
                    data[idx + 2] = color >> 8 & 255;
                    data[idx + 3] = color & 255;
                    idx += 4;
                }

            }
        }
    }
}


