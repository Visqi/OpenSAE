// Generated by Haxe 4.3.1

#pragma warning disable 109, 114, 219, 429, 168, 162
using System;
using System.Collections;
using System.Collections.Generic;

namespace Geometrize
{
    internal static class Util
    {
        public static (int min, int max) GetMinMax(IReadOnlyList<int> items)
        {
            if (items.Count == 0)
                throw new ArgumentException("Items must have a least one value", nameof(items));

            int min = items[0];
            int max = items[0];

            for (int i = 1; i < items.Count; i++)
            {
                int v = items[i];

                if (v < min)
                    min = v;

                if (v > max)
                    max = v;
            }

            return (min, max);
        }


        public static int GetAverageImageColor(Bitmap image)
        {
            if (image is null)
            {
                throw new ArgumentNullException(nameof(image));
            }

            unchecked
            {
                int totalRed = 0;
                int totalGreen = 0;
                int totalBlue = 0;
                {
                    int _g = 0;
                    int _g1 = image.width;
                    while (_g < _g1)
                    {
                        int x = _g++;
                        {
                            int _g2 = 0;
                            int _g3 = image.height;
                            while (_g2 < _g3)
                            {
                                int y = _g2++;
                                int pixel = ((int[])image.data)[(image.width * y) + x];
                                totalRed += (((int)pixel) >> 24) & 255;
                                totalGreen += (((int)pixel) >> 16) & 255;
                                totalBlue += (((int)pixel) >> 8) & 255;
                            }

                        }

                    }

                }

                int size = image.width * image.height;
                int red = totalRed / size;
                int green = totalGreen / size;
                int blue = totalBlue / size;
                return (((red < 0) ? 0 : ((red > 255) ? 255 : red)) << 24) + (((green < 0) ? 0 : ((green > 255) ? 255 : green)) << 16) + (((blue < 0) ? 0 : ((blue > 255) ? 255 : blue)) << 8) + 255;
            }
        }
    }
}


